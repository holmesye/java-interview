1) collection接口下面有哪些集合，hashmap的实现原理，要把1.7和1.8的区别(红黑树)讲出来，map有哪些实现类以及使用场景，hashmap, hashtable, linkedhashmap,weakHashMap, treemap, concurrentmap，你要是讲的好这里可以说十几分钟，linkedhashmap和treemap排序的区别，concurrenthashmap如何实现线程安全，这里也要把1.7和1.8实现差异说出来(分段加锁和cas技术)，说到这里以后就会问你cas实现原理( CPU Lock前缀指令),它是如何保证其他cpu core的cache失效的，然后会问你volatile的实现原理，要结合java内存模型来讲，可见性是如何实现的(内存屏障)，synchronized锁和reentrantlock的区别以及内部怎么实现的:常用的gc算法及优缺点，如何判断对象的存活性

-----------------------

Java的容器体系主要以Collection和Map向下延伸

Collection-->
  List--> 有序列表
    ArrayList 基于数据的列表
    LinkList  基于链表的列表
    Vector    基于数组的列表，与ArrayList的核心区别是线程安全。
  Set-->
    HashSet   基于哈希表的保证唯一性的集合。其实现本质是一个HashMap加一个Dummy的Value。
    SortedSet-->NavigableSet-->
      TreeSet   基于红黑树的保证唯一性的集合，可以保证数据的有序，并可以按照数据的上下边界去查找（例如一致性Hash的应用），其实现本质是一个TreeMap加一个Dummy的Value。
  Queue-->
    Deqeue-->       支持双端添加、删除的队列，可用作FIFO和LIFO。
      ArrayDeque    基于循环数组实现的Deque，可以前后添加、删除。有tail和head偏移
      ConcurrentLinkedDeque 基于链表实现的Deque，可以实现Deque的能力，并且保证线程安全（Concurrent）。
                            注意其size是遍历链表的，所以时间比较长。并且真正读取到的size不一定是真实的size。（并发访问）
    BlockingQueue--> FIFO的队列。对元素的放入提供了额外的put/take/offer(with timeout)/poll(withtimout)的阻塞接口。考虑其使用场景，皆为线程安全。
      ArrayBlockingQueue  基于数组的的阻塞队列，只有一把锁，读写共用。
      DelayQueue          延时执行的队列，只有一把锁，读写共用。比较常见的使用场景是资源超时管理。
      LinkedBlockingQueue 基于链表的阻塞队列，读写各一把锁。
      PriorityBlockingQueue 出队列顺序不是基于入队列顺序，而是基于优先级。

    
      
    
