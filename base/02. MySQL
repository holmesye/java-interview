mysql有哪些索引，底层数据结构是什么，画一下b+树的结构以及数据的插入过程，聚集索引的特点，如何做索引优化，
给你一个sql语句select a,b,c from t where a<某个值 and  b>某个值 and c = 1,如何建索引(可以是c,a,b或者c,b, a的联合索引，但要分析什么场景下分别用哪个);
结合Innodb的实现说下数据库的隔离级别，分别是怎么解决脏读、不可重复读和幻读取的;
对mysql最新版本的同步机制有没有了解,比如一个主节点和多个备份节点,mysql怎么保证可用性和性能；

mysql有哪些索引：
	B+/-树索引（InnoDB和MyISAM都支持B-Tree索引。InnoDB用的是一个变种B+Tree）
	hash索引（仅仅能满足"=","IN"和"<=>"查询，不能使用范围查询。其检索效率非常高，索引的检索可以一次定位，只有Memory存储引擎显示支持hash索引）
	FULLTEXT索引（MyISAM和InnoDB引擎都支持）
	R-Tree索引（空间。只有MyISAM引擎支持，并且支持的不好）
	
	底层数据结构：
		B-树：阶数m的树。Math.ceil(m/2)-1
			https://www.cnblogs.com/nullzx/p/8729425.html
		B+树：
			非叶子节点不存储数据。仅读取索引时更快。
			查询效率更加确定
			遍历效率高（相邻节点），整个读取叶子节点所在Page。
	Hash：希望用比B树更少的查询次数。无法使用Range查询，无法排序、碰撞时性能下降。
	Fulltext：只支持英文（5.7以后支持中文）基于分词的（所有非字母数字的，都是分词符），可以指定最小分词长度。
			
聚集索引：
   根据索引字段对数据排序。一般取主键作为聚集的依据。检索效率高、CUD慢，索引空间小。
   

索引优化
	给你一个sql语句select a,b,c from t where a<某个值 and  b>某个值 and c = 1
	优先选高维度、长度短的值做索引
    只能使用左前缀(B-Tree)，所以是c+a 或 c+b 或 a、b、c

Innodb的实现说下数据库的隔离级别，分别是怎么解决脏读、不可重复读和幻读取的：
    未提交读：允许脏读，可能读取到未提交的数据。
    已提交读：只能读取到已经提交的数据，Oracle的默认级别。
    可重复读：一个事务内的查询，是以事务开始时一致的。是InnoDB的默认级别。如果此时有另一个事务修改数据，会出现幻读（读取的不是最新的）。
    串行读：读操作也会对表加锁。
    解决幻读：
        InnoDB的三种行锁办法：
            Record Lock： 单条记录加锁。
            Gap Lock：对范围加锁。防止幻读。
            Next Key Lock： 单条记录+范围加锁。防止幻读。select * from t where id>1 for update;

